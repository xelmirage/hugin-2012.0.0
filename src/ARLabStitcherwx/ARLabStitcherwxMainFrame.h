#ifndef __ARLabStitcherwxMainFrame__
#define __ARLabStitcherwxMainFrame__

/**
@file
Subclass of MainFrame, which is generated by wxFormBuilder.
*/

#include "ARLabStitcherwx.h"
#include "SuperOverlay.h"
#include "ARLabStitcherwxNewProjectWizard.h"
#include "ARLabStitcherwxGPSFrame.h"
#include "ARLabStitcherwxControlPointFrame.h"

#include "base_wx/huginConfig.h"
#include "base_wx/wxPlatform.h"
#include "base_wx/platform.h"
#include <wx/wxprec.h>
#include<wx/dir.h>
#include<wx/process.h>
#include<wx/stdpaths.h>
#include<boost/lexical_cast.hpp>
#include <hugin1/base_wx/MyExternalCmdExecDialog.h>


//// end generated include
using namespace std;

/** Implementing MainFrame */
#define phase_preprocess 0
#define phase_pto_gen 1
#define phase_cpfind 2
#define phase_cpclean 3
#define phase_linefind 4
#define phase_checkpto 5
#define phase_optimise 6
#define phase_crop 7
#define phase_nona_gps 8
#define phase_merge 9
#define phase_done 10
class ARLabStitcherwxMainFrame : public MainFrame
{

	class processThread : public wxThread
	{
	private:
		ARLabStitcherwxMainFrame* frame;
	public:
		processThread(ARLabStitcherwxMainFrame* frame) :
			frame(frame)
		{};
		virtual void* Entry()
		{
			std::string cmd;
			wxFileName beltlog(frame->sdir + "\\belts.log");
			wxFileName stitch(frame->sdir + "\\stitch.pto");
			wxFileName stitch_cp(frame->sdir + "\\stitch_cp.pto");
			wxFileName stitch_cp_clean(frame->sdir + "\\stitch_cp_clean.pto");
			wxFileName stitch_cp_clean_line(frame->sdir + "\\stitch_cp_clean_linefind.pto");
			wxFileName stitch_cp_clean_line_op(frame->sdir + "\\stitch_cp_clean_linefind_op.pto");
			wxFileName gps_connect(frame->outfileName + ".coord");
			wxFileName stitch_cp_clean_line_op_crop(frame->sdir + "\\stitch_cp_clean_linefind_op_crop.pto");
			wxFileName ofile(frame->outfileName);



			wxMutexGuiEnter();
			frame->m_textCtrlProgress->Clear();
			frame->m_execPanel->ClearText();
			frame->t = wxDateTime::Now();
			wxMutexGuiLeave();


			//航迹识别
			setGauge(10);
			if (!beltlog.FileExists())
			{
				cmd = frame->ExeDir + wxT("\\gpsfilter -o ") + frame->sdir + wxT("\\belts.log -g ") + frame->gpsfileName + wxT(" -s ") + frame->sdir;
				if (execexternal(cmd, wxT("航迹识别")) != 0)
					return NULL;
				//"gpsfilter -o "+sdir+"belts.log -g "+gpsfileName+" -s "+sdir,"processing GPSFilting");
				
			}
			else
			{
				push_message(wxT("\n---------------\n[") + frame-> run_time + wxT("] 跳过航迹识别......\n---------------\n"));
			}

			//生成工程
			setGauge(20);
			if (!stitch.FileExists())
			{
				cmd = frame->ExeDir + wxT("\\pto_gen ") + frame->sdir + wxT("\\*.jpg -o") + frame->sdir + wxT("\\stitch.pto --gps -f 1");
				if (execexternal(cmd, wxT("生成工程")) != 0)
				{
					return NULL;
				}
			}
			else
			{
			

				push_message("\n---------------\n[" + frame->run_time + "] 跳过生成工程......\n---------------\n");
				//textEdit->setText(textEdit->toPlainText()+tr("\n skip generating pto......\n\n"));

			}

			//匹配
			setGauge(30);
			if (!stitch_cp.FileExists())
			{
				cmd = frame->ExeDir + wxT("\\cpfindgps001 -o ") + frame->sdir + wxT("\\stitch_cp.pto ") + frame->sdir + wxT("\\stitch.pto --gps");
				if (execexternal(cmd, wxT("匹配图像")) != 0)
				{
					return NULL;
				}
				
			}
			else
			{

				push_message("\n---------------\n[" + frame->run_time + "] 跳过图像匹配......\n---------------\n");
				//textEdit->setText(textEdit->toPlainText()+tr("\n skip finding control points......\n\n"));

			}

			//清理误差
			setGauge(40);
			if (!stitch_cp_clean.FileExists())
			{
				cmd = frame->ExeDir + wxT("\\cpclean -o") + frame->sdir + wxT("\\stitch_cp_clean.pto ") + frame->sdir + wxT("\\stitch_cp.pto");
				if (execexternal(cmd, wxT("清理误差点")) != 0)
				{
					return NULL;
				}
				
			}
			else
			{
				

				push_message("\n---------------\n[" + frame->run_time + "] 跳过清理误差点......\n---------------\n");
				//textEdit->setText(textEdit->toPlainText()+tr("\n skip cleaning control points......\n\n"));
			}

			//图像校准
			setGauge(50);
			if (!stitch_cp_clean_line.FileExists())
			{

				cmd = frame->ExeDir + "\\linefind -o " + frame->sdir + "\\stitch_cp_clean_linefind.pto " + frame->sdir + "\\stitch_cp_clean.pto";
				if (execexternal(cmd, wxT("图像校准")) != 0)
				{
					return NULL;
				}
				
			}
			else
			{
				

				push_message("\n---------------\n[" + frame->run_time + "] 跳过图像校准......\n---------------\n");
				//textEdit->setText(textEdit->toPlainText()+tr("\n skip finding vertical lines......\n\n"));


			}

			//工程检查
			setGauge(60);

			cmd = frame->ExeDir + "\\checkpto " + frame->sdir + "\\stitch_cp_clean_linefind.pto";
			if (execexternal(cmd, wxT("工程检查")) != 0)
			{
				return NULL;
			}

			//图像定向
			setGauge(70);

			if (!stitch_cp_clean_line_op.FileExists())
			{
				cmd = frame->ExeDir + "\\autooptimiser -a -s -l -o " + frame->sdir + "\\stitch_cp_clean_linefind_op.pto " + frame->sdir + "\\stitch_cp_clean_linefind.pto";
				if (execexternal(cmd, wxT("图像定向")) != 0)
				{
					return NULL;
				}
				
			}
			else
			{
				
				push_message("\n---------------\n[" + frame->run_time + "] 跳过工程检查......\n---------------\n");
			}
			
			//裁剪
			setGauge(80);

			if (!stitch_cp_clean_line_op_crop.FileExists())
			{
				cmd = frame->ExeDir + "\\pano_modify --canvas=30% --crop=auto " + frame->sdir + "\\stitch_cp_clean_linefind_op.pto -o " + frame->sdir + "\\stitch_cp_clean_linefind_op_crop.pto";
				if (execexternal(cmd, wxT("裁剪")) != 0)
				{
					return NULL;
				}
				
			}
			else
			{
				
				push_message("\n---------------\n[" + frame->run_time + "] 跳过裁剪......\n---------------\n");
			}
			//this->change_status();

			//GPS重采样
			setGauge(90);
			if (!gps_connect.FileExists())
			{
				cmd = frame->ExeDir + "\\nona -f " + frame->sdir + "\\stitch_cp_clean_linefind_op_crop.pto -o " + frame->outfileName;
				if (execexternal(cmd, wxT("GPS重采样")) != 0)
				{
					return NULL;
				}

				
			}
			else
			{
				
				push_message("\n---------------\n[" + frame->run_time + "] GPS重采样......\n---------------\n");
			}


			//"融合
			setGauge(95);
			while ((!stitch_cp_clean_line_op_crop.FileExists()) || (!gps_connect.FileExists()))
			{
			}
			cmd = frame->ExeDir + "\\split_blend " + frame->sdir + "\\stitch_cp_clean_linefind_op_crop.pto -o " + frame->outfileName;
			if (execexternal(cmd, wxT("融合")) != 0)
			{
				return NULL;
			}
			

			return NULL;


		}
		int execexternal(wxString command, wxString message)
		{
			wxMutexGuiEnter();
			frame->push_message("\n---------------\n[" + frame->run_time + "] 开始 " + message + "\n---------------\n");
			if (frame->m_execPanel->ExecWithRedirect(command) == -1)
			{
				wxMessageBox(wxString::Format(_("Error running \n%s"), command.c_str()),
					_("Error running command"), wxICON_ERROR | wxOK);
				return -1;
			}
			wxMutexGuiLeave();
		}
		void push_message(wxString message)
		{
			wxMutexGuiEnter();
			//m_textCtrlProgress->SetValue(
			//	m_textCtrlProgress->GetValue()+message);
			frame->m_textCtrlProgress->AppendText(message);
			wxMutexGuiEnter();
		}
		void setGauge(int g)
		{
			wxMutexGuiEnter();
			frame->m_gauge3->SetValue(g);
			wxMutexGuiLeave();
		}
	};
public:
	/** Constructor */
	ARLabStitcherwxMainFrame( wxWindow* parent,wxString Dir );
	void newProcess_discard(wxCommandEvent& WXUNUSED(event));
	void processcmd(wxCommandEvent& WXUNUSED(event));
	void ListBoxClicked(wxCommandEvent& e);
	void count_time(::wxTimerEvent& e);
	void end_process(::wxProcessEvent& e);
	void throw_to_parent(wxProcessEvent& e);
	void change_status();

	void newProjectTool(wxCommandEvent& WXUNUSED(event));
	void showTrack(wxCommandEvent& WXUNUSED(event));
	void showKML(wxCommandEvent& WXUNUSED(event));
	void generateSuperOverlay(wxCommandEvent& WXUNUSED(event));
	void preProcess(wxCommandEvent& WXUNUSED(event));
	void menuProcess(wxCommandEvent& WXUNUSED(event));
	void menuOptimise(wxCommandEvent& ee);
	void findCP(wxCommandEvent& WXUNUSED(event));
	void panelPreviewSizeChanged(wxSizeEvent& e);

	void push_message(wxString message);
	int execexternal(wxString command,wxString tickmessage);

	
	//// end generated class members
private:

	int spin;
	processThread* threadProcess;
	MyExecPanel * m_execPanel;
	ARLabStitcherwxGPSFrame *m_GPSFrame;
	ARLabStitcherwxControlPointFrame* m_controlPointsFrame;


	wxDateTime t;
	time_t time_start;
	time_t time_now;
	bool preview_isReady;
	//std::string phasename;
	std::string sdir,gpsfileName,outfileName;
	wxString ExeDir,run_time;
	long time_count;
	int phase;
	std::string phasename[11];
	bool isBatch;
	wxString currentPreviewPic;

	wxFileName beltlog;
	wxFileName stitch;
	wxFileName stitch_cp;
	wxFileName stitch_cp_clean;
	wxFileName stitch_cp_clean_line;
	wxFileName stitch_cp_clean_line_op;
	wxFileName gps_connect;
	wxFileName stitch_cp_clean_line_op_crop;
	wxFileName ofile;


	DECLARE_EVENT_TABLE()

public:
	void process(void);

	void UpdateImagePreview();
	
private:
	void allDisableForWork();
	void allEnableForWork();
private:
	bool isExecPanel_Running;
	bool isExecPanel_Paused;
	bool allowToolStart;
	bool allowToolShowTrack;
	void menuCrop(wxCommandEvent& ee);
	void blend(wxCommandEvent& ee);
public:
	void EnableFunction(int phase);
private:
	void pauseProcess(wxCommandEvent& ee);
	void stopProcess(wxCommandEvent& ee);

};

enum
{
	ID_Quit,
	ID_About,
	//wxID_execPanel=900,

};


#endif // __ARLabStitcherwxMainFrame__
